openapi: 3.0.0
info: 
  title: AngelHack seoul 2020 EcoBox Api by Ainize
  version: 0.0.1

servers: 
  - url: https://ecobox-github-josuekim.endpoint.ainize.ai

paths:
  /api/restaurants:
    get:
      summary: Get restaurantList.
      responses:   # Set response
        '200':
          description: Success
          content:   # Descriptions of potential response payloads (optional)
            application/json:
              schema:   # Set data types
                type: object
        '400':
          description: Bad Request Error
        default: 
          description: Unexpected Error
  /api/restaurant/{id}:
    get:
      summary: Get specific restaurant info.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the restaurant to get
      responses:   # Set response
        '200':
          description: Success
          content:   # Descriptions of potential response payloads (optional)
            application/json:
              schema:   # Set data types
                type: object
        '400':
          description: Bad Request Error
        default: 
          description: Unexpected Error
  /api/stockRecords:
    get:
      summary: Get stockRecordList.
      responses:   # Set response
        '200':
          description: Success
          content:   # Descriptions of potential response payloads (optional)
            application/json:
              schema:   # Set data types
                type: object
        '400':
          description: Bad Request Error
        default: 
          description: Unexpected Error
  /api/stockRecord/{retaurantId}:
    get:
      summary: Get stockRecordList about specific restaurant.
      parameters:
        - in: path
          name: retaurantId
          schema:
            type: integer
          required: true
          description: Numeric ID of the stockRecordList to get
      responses:   # Set response
        '200':
          description: Success
          content:   # Descriptions of potential response payloads (optional)
            application/json:
              schema:   # Set data types
                type: object
        '400':
          description: Bad Request Error
        default: 
          description: Unexpected Error
  /api/orders:
    get:
      summary: Get orderList.
      responses:   # Set response
        '200':
          description: Success
          content:   # Descriptions of potential response payloads (optional)
            application/json:
              schema:   # Set data types
                type: object
        '400':
          description: Bad Request Error
        default: 
          description: Unexpected Error
  /api/order:
    post:
      summary: Insert order info.
      requestBody:
        content:
           application/json:
              schema:
                 type: object
                 properties:
                    restaurant_id:
                       type: integer
                    type:
                       type: string
                    container_type1_amount:
                       type: integer
                    container_type2_amount:
                       type: integer
                    container_type3_amount:
                       type: integer
                    container_type4_amount:
                       type: integer
                    status:
                       type: integer
      responses:
        '200': 
          description: 'succeed'
    put:
      summary: Update order status.
      requestBody:
        content:
           application/json:
              schema:
                 type: object
                 properties:
                    status:
                       type: integer
                    id:
                       type: integer
      responses:
        '200': 
          description: 'succeed'
  /api/restaurant:
    post:
      summary: Insert restaurant info.
      requestBody:
        content:
           application/json:
              schema:
                 type: object
                 properties:
                    name:
                       type: string
                    address:
                       type: string
                    food_type:
                       type: string
                    plan_type:
                       type: integer
                    max_stock:
                       type: integer
                    current_stock:
                       type: integer
      responses:
        '200': 
          description: 'succeed'
    put:
      summary: Update restaurant status.
      requestBody:
        content:
           application/json:
              schema:
                 type: object
                 properties:
                    current_stock:
                       type: integer
                    id:
                       type: integer
      responses:
        '200': 
          description: 'succeed'
  /api/stockRecord:
    post:
      summary: Insert stockRecord info.
      requestBody:
        content:
           application/json:
              schema:
                 type: object
                 properties:
                    restaurant_id:
                       type: integer
                    customer_address:
                       type: string
                    stock_change:
                       type: integer
                    type:
                       type: integer
      responses:
        '200': 
          description: 'succeed'